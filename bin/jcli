#!/usr/bin/env bash

# Code based on https://github.com/xkpd3/shell-scripts/blob/master/jcli.sh
# Tested on Bash 4+
#
# this is the command used to publish/upload the jekyll _site directory
DEPLOY_TEST_CMD="bundle exec jekyll s --drafts"
# this is the command to commit the jekyll directory to github
DEPLOY_CMD="git pull && git add -A && git commit -m \"Update `date +'%Y.%m.%d %H:%M'`\" && git push; echo \"<enter to continue>\"; read dummy;";
# the post editor
EDITOR="vim";

if [[ -z "$JEKYLL_ROOT" ]]; then
  echo "You must set JEKYLL_ROOT"
  exit 1
fi

# set colors
green() { echo -e "\e[1;32m$1\e[0;39;49m"; }
brown() { echo -e "\e[0;33m$1\e[0;39;49m"; }
red() { echo -e "\e[1;31m$1\e[0;39;49m"; }
blue() { echo -e "\e[01;34m$1\e[0;39;49m"; }

# in case there is an argument given to jcmd, use it instantly as user input
argument="$1";

# jump to jekyll root directory
cd "$JEKYLL_ROOT";

# main loop
start() {
  clear
  blue " J E K Y L L   -   C L I "
  brown "=by=sdk=================="
  echo ""

  # generate post hash table
  unset POSTS;
  declare -A POSTS=();

  for i in _posts/*;
    do
      COUNTER=$((COUNTER + 1));
      POSTS+=( ["$COUNTER"]="`echo $i | sed "s/^_posts\/\(.*\).md/\1/g"`");
    done;


  # generate draft hash table
  unset DRAFTS;
  declare -A DRAFTS=();

  for i in _drafts/*;
    do
      COUNTER=$((COUNTER + 1));
      DRAFTS+=( ["$COUNTER"]="`echo $i | sed "s/^_drafts\/\(.*\).md/\1/g"`");
    done;
  unset COUNTER;

  # print post list
  echo ""
  echo "Online Posts:"
  for p in "${!POSTS[@]}";
    do
      echo "$p - ${POSTS["$p"]}";
    done | egrep -v '^\*$' | sort -n;


  # print draft list list
  echo ""
  echo "Unpublished Drafts:"
  for d in "${!DRAFTS[@]}";
    do
      echo "$d - ${DRAFTS["$d"]}";
    done | egrep -v '^\*$' | sort -n;

  # print return message after post list
  if [ "$message_red" != "" ]; then
    echo ""
    red "$message_red";
    unset message_red;
  fi

  # print return message after post list
  if [ "$message_green" != "" ]; then
    echo ""
    green "$message_green";
    unset message_green;
  fi

  # ask user for action or take command line argument
  echo ""
  if [ "$argument" != "" ]; then
    selection[0]=$argument;
    unset argument;
  else
    echo "Commands: (<id> | new | draft | toggle <id> | ren <id> | serve | deploy | q/quit/<enter>)"
    echo -n ":> ";
    read -e -a selection;
  fi

  # nothing entered -> quit
  if [ "${selection[0]}" == "" ]; then
    echo "";
    green "Empty input? OK. Bye.";
    exit;
  fi

  # new entered -> create new post
  if [ "${selection[0]}" == "new" ]; then
    echo -n "Title? "
    read -e subject
    if [ "$subject" == "" ]; then
      message_red="Empty subject?";
      start
    fi;
    permlink=`echo "$subject" | iconv -f utf-8 -t ascii//TRANSLIT | tr '[:upper:]' '[:lower:]' | sed -e 's/[^[:alnum:]]\{1,\}/-/g' | sed 's/^-//g' | sed 's/-$//g'`
    DATE=`date "+%Y-%m-%d"`
    TEMPLATE="---\nlayout: post\ntitle: \"$subject\"\ntags:\n---\n\n"
    echo -e $TEMPLATE > "_posts/$DATE-$permlink.md"
    vim "_posts/$DATE-$permlink.md"
    message_green="Post created (_posts/$DATE-$permlink.md)!";
    start;
  fi

  if [ "${selection[0]}" == "draft" ]; then
    echo -n "Title? "
    read -e subject
    if [ "$subject" == "" ]; then
      message_red="Empty subject?";
      start
    fi;
    permlink=`echo "$subject" | iconv -f utf-8 -t ascii//TRANSLIT | tr '[:upper:]' '[:lower:]' | sed -e 's/[^[:alnum:]]\{1,\}/-/g' | sed 's/^-//g' | sed 's/-$//g'`
    TEMPLATE="---\nlayout: post\ntitle: \"$subject\"\ntags:\n---\n\n"
    echo -e $TEMPLATE > "_drafts/$permlink.md"
    vim "_drafts/$permlink.md"
    message_green="Draft created (_drafts/$permlink.md)!";
    start;
  fi

  # run the deploy with drafts command
  if [ "${selection[0]}" == "serve" ]; then
    eval $DEPLOY_TEST_CMD;
    start;
  fi

  # run the gitpush command
  if [ "${selection[0]}" == "deploy" ]; then
    eval $DEPLOY_CMD;
    start;
  fi

  #rename a post
  if [ "${selection[0]}" == "ren" ]; then
    ren=${selection[1]};
    renPubFile="_posts/${POSTS["$ren"]}.md"
    renDraftFile="_drafts/${DRAFTS["$ren"]}.md"
    if [ -f $renPubFile ]; then
      echo -n "Rename to? "
      read -e -i ${POSTS["$ren"]} newName;
      mv $renPubFile "_posts/$newName.md";
      message_green="Renamed ${POSTS["$ren"]} to $newName";
      start;
    elif [ -f $renDraftFile ]; then
      echo -n "Rename to? "
      read -e -i ${DRAFTS["$ren"]} newName;
      mv $renDraftFile "_drafts/$newName.md";
      message_green="Renamed ${DRAFTS["$ren"]} to $newName";
      start;
    else
      message_red="Post not found (drafts not supported)!";
      start;
    fi
  fi

  if [ "${selection[0]}" == "toggle" ]; then
    id=${selection[1]};

    pubFile="_posts/${POSTS["$id"]}.md"
    draftFile="_drafts/${DRAFTS["$id"]}.md"

    DATE=`date "+%Y-%m-%d"`

    draftFileResult="_posts/$DATE-${DRAFTS["$id"]}.md"
    pubFileResult="_drafts/`echo ${POSTS["$id"]} | sed 's/....-..-..-//g'`.md"

    if [ -f $draftFile ]; then
      mv $draftFile  $draftFileResult;
      message_green="Moved $draftFile to $draftFileResult";
      start;
    elif [ -f $pubFile ]; then
      mv $pubFile $pubFileResult;
      message_green="Moved $pubFile to $pubFileResult";
      start;
    else
      message_red="File not found!";
      start;
    fi
  fi

  # quit jcmd
  if [ "${selection[0]}" == "q" ]; then
    green "OK. Bye.";
    exit;
  fi
  if [ "${selection[0]}" == "quit" ]; then
    green "OK. Bye.";
    exit;
  fi

  # anyting else entered -> check if post exists end edit
  if [ "${selection[0]}" != "" ]; then
    selPostFile=_posts/${POSTS["${selection[0]}"]}.md
    selDraftFile=_drafts/${DRAFTS["${selection[0]}"]}.md
    if [ -f $selPostFile ]; then
      $EDITOR $selPostFile;
      message_green="Post changed ($selPostFile).";
      start;
    elif [ -f $selDraftFile ]; then
      $EDITOR $selDraftFile;
      message_green="Post changed ($selDraftFile).";
      start;
    else
      message_red="File not found!";
      start
    fi
  fi
}

start;
