set nocompatible

so ~/.dependencies.vim

filetype plugin indent on   
syntax on

set number
set ruler
syntax on
set encoding=utf-8
set hidden

let mapleader = "\<Space>" 
nnoremap <Space> <nop>

" Store lots of :cmdline history
set history=1000
" Store marks on up to 100 files
set viminfo='100,f1

" Whitespace stuff
set wrap
set scrolloff=3
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set list listchars=tab:\ \ ,trail:Â·

" These two will leave the cursor to where it cleaned spaces which isn't very
" comfortable
autocmd BufWritePre *.rb :%s/\s\+$//e
autocmd BufWritePre *.py :%s/\s\+$//e

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" Tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,test/fixtures/*,vendor/gems/*,vendor/bundle/*

" make uses real tabs
au FileType make	set noexpandtab

" Status bar
" set laststatus=2
" set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P

" Fix issues with the shell and fugitive
set shell=bash

" Thorfile, Rakefile, Vagrantfile and Gemfile are Ruby
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru}    set ft=ruby

" Remember last location in file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
        \| exe "normal g'\"" | endif
endif

set directory=~/.vim/swap,.

" configure easytags to run ctags after saving the buffer
let g:easytags_events = ['BufWritePost']
let g:easytags_async = 1
set tags=./tags
let g:easytags_dynamic_files = 1

function s:setupWrapping()
  set wrap
  set wm=2
  set textwidth=72
endfunction

function s:setupMarkup()
  call s:setupWrapping()
  map <buffer> <Leader>p :Mm <CR>
endfunction

" md, markdown, and mk are markdown and define buffer-local preview
au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} call s:setupMarkup()

au BufRead,BufNewFile *.txt call s:setupWrapping()

" make python follow PEP8 ( http://www.python.org/dev/peps/pep-0008/ )
au FileType python  set tabstop=4 textwidth=79

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" load the plugin and indent settings for the detected filetype
filetype plugin indent on

" Opens an edit command with the path of the currently edited file filled in
" Normal mode: <Leader>e
map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

" CTags
map <Leader>rt :!ctags --extra=+f -R *<CR><CR>

" Unimpaired configuration
" Bubble single lines
nmap <C-K> [e
nmap <C-J> ]e
" Bubble multiple lines
vmap <C-K> [egv
vmap <C-J> ]egv

" ZoomWin 
map <Leader>z :ZoomWin<CR>

map <Leader><Leader> <c-^>
map <Leader>w :w<CR>
map <Leader>q :bw<CR>

function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'), 'file')
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction

map <leader>mv :call RenameFile()<cr>

"spell check when writing commit logs
autocmd filetype svn,*commit* set spell

let g:ctrlp_working_path_mode = 2
" refresh current directory when switching buffers
" au BufEnter * cal ctrlp#SetWorkingPath(2) 
let g:ctrlp_mru_files = 1 
let g:ctrlp_jump_to_buffer = 1

let g:ctrlp_custom_ignore = 'vendor/bundle$'

map <Leader>f :CtrlPRoot<CR>
map <Leader>c :CtrlPCurFile<CR>
map <Leader>b :CtrlPBuffer<CR>
map <Leader>m :CtrlPMRUFiles<CR>

" Git bindings
map <Leader>gs :Gstatus<CR>
map <Leader>gc :Gcommit<CR>
map <Leader>gd :Gdiff<CR>
map <Leader>gb :Gblame<CR>

" If we're under Ubuntu, adjust ack's command
if !filereadable("/usr/bin/ack")
  let g:ackprg="ack-grep -H --nocolor --nogroup --column"
endif

command Notes e ~/.notes
command Todo Ack TODO
command ShowUtf8 /[^[:print:]]

" ban arrows movements
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>
imap <up> <nop>
imap <down> <nop>
imap <left> <nop>
imap <right> <nop>

" Insert CRs with ease
nmap <S-Return> i<Return><Esc>
nmap <Return> o<Esc>

" Clean search
map //  :nohlsearch<CR>; echo 'Search highlight cleared' <CR>

let g:ruby_path = system('echo $HOME/.rbenv/shims')

set background=dark
let g:solarized_termtrans=1
colorscheme solarized
let g:solarized_termtrans = 1
set t_Co=16
let g:solarized_termcolors=16


" Use a space to split vertically
set fillchars+=vert:\ 
highlight clear VertSplit 
